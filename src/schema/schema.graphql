enum ConnectionBroker {
  XTB
}

type Connection {
  id: ID!
  broker: ConnectionBroker!
  createdAt: String!
  updatedAt: String!
}

type Deposit {
  id: ID!
  value: Float!
  currency: String!
  createdAt: String!
  updatedAt: String!
}

type Notification {
  id: ID!
  daysBeforeNotify: [Int]!
  createdAt: String!
  updatedAt: String!
}

enum PeriodUnit {
  MONTH
  YEAR
}

type Period {
  id: ID!
  value: Int!
  unit: PeriodUnit!
  createdAt: String!
  updatedAt: String!
}

type RebalanceStrategy {
  id: ID!
  period: Period!
  periodDeposit: Deposit!
  createdAt: String!
  updatedAt: String!
}

enum RebalanceHistoryStatus {
  SKIPPED
  DONE
  REMOVED
}

type RebalanceHistory {
  id: ID!
  status: RebalanceHistoryStatus!
  shares: [Share]!
}

type WalletSettings {
  id: ID!
  hasNotificationsSilenced: Boolean!
  createdAt: String!
  updatedAt: String!
}

enum ShareStatus {
  DRAFT
  SKIPPED
  SKIPPED_DRAFT
  INCLUDED
}

type Share {
  id: ID!
  ticker: String!
  volume: Float!
  status: ShareStatus!
  wage: Float!
  createdAt: String!
  updatedAt: String!
}

enum WalletWageStatus {
  UNSET
  READY
}

type Wallet {
  id: ID!
  name: String!
  currency: String!
  connections: [Connection]!
  strategy: RebalanceStrategy!
  shares: [Share]!
  wageStatus: WalletWageStatus!
  settings: WalletSettings!
  notifications: [Notification]!
  history: [RebalanceHistory]!
  startDate: String!
  createdAt: String!
  updatedAt: String!
}

input CreateWalletShareInput {
  ticker: String!
  wage: Float!
}

input CreateWalletInput {
  name: String!
  broker: String!
  currency: String!
  periodValue: Int!
  periodUnit: PeriodUnit!
  periodDeposit: Float!
  notifications: [Int]!
  startDate: String!
}

type CreateWalletPayload {
  wallet: Wallet!
}

input DeleteWalletInput {
  walletId: ID!
}

type DeleteWalletPayload {
  walletId: ID!
}

type Query {
  wallets: [Wallet!]
  wallet(id: String!): Wallet!
}

type Mutation {
  createWallet(input: CreateWalletInput!): CreateWalletPayload
  deleteWallet(input: DeleteWalletInput!): DeleteWalletPayload
}
